name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Allows push/amend to the rep

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
          cache: maven  # Speeds up deps

      - name: Build and Test with Maven (JaCoCo + Surefire)
        run: mvn clean verify  # Runs tests (Surefire), generates JaCoCo reports

#      - name: SonarCloud Scan
#        continue-on-error: true  # Add thisâ€”keeps CI green for now
#        run: |
#          mvn sonar:sonar \
#            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
#            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }} \
#            -Dsonar.host.url=https://sonarcloud.io \
#            -Dsonar.token=${{ secrets.SONAR_TOKEN }}\
#            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Debug Jacoco Report
        run: |
          ls -la target/site/jacoco || echo "Jacoco directory not found - check if report goal ran"
          cat target/site/jacoco/jacoco.xml || echo "jacoco.xml not found or empty - verify tests cover code"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Optional for public repos, but use it
          files: ./target/site/jacoco/jacoco.xml  # Main JaCoCo report; add more if needed (e.g., ,./target/site/jacoco-ut.xml)
          verbose: true  # Debug logs
          fail_ci_if_error: true  # Don't fail build on upload issues

      - name: Generate Test Badge JSONs
        if: always() # Should always run
        run: |
          sudo apt-get update && sudo apt-get install -y xmlstarlet                         # Install parsing package
          mkdir -p ci-stats                                                                 # Create a temporary directory for the reports
          for file in target/surefire-reports/TEST-*.xml;                                   # Go through the generated reports
          do                                                                                # Loop Start
            if [ ! -f "$file" ];                                                            # Make sure the file actually exists
              then continue; 
            fi
            class=$(basename "$file" .xml |                                                 # Remove the extension from the file
                    sed 's/TEST-//' |                                                       # Remove the TEST- from the start
                    awk -F. '{print $NF}')                                                  # Split out the rest of the name by '.' and 
            tests=$(xmlstarlet sel -t -v '/testsuite/@tests' "$file" || echo 0)             # Root XML tests property
            failures=$(xmlstarlet sel -t -v '/testsuite/@failures' "$file" || echo 0)       # Root XML failures property
            errors=$(xmlstarlet sel -t -v '/testsuite/@errors' "$file" || echo 0)           # Root XML errors property
            skipped=$(xmlstarlet sel -t -v '/testsuite/@skipped' "$file" || echo 0)         # Root XML skipped property
            passed=$((tests - failures - errors - skipped))                                 # Derive how many passed from above
            message="$passed/$tests"
            if [ "$failures" -eq 0 ] && [ "$errors" -eq 0 ] && [ "$skipped" -eq 0 ];then    # No Failures
              color="success" # Green
            else                                                                            # Failures
              color="critical" # Red
            fi
            echo '{"schemaVersion":1,"label":"Tests Passing","message":"'$message'","color":"'$color'"}' > "ci-stats/$class.json" # Create the JSON in a single line
          done                                                                              # Loop End
          
      - name: Push Badge JSONs to ci-stats Branch
        if: always()
        run: |
          # Default workflow user config
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Checkout the dedicated stats branch
          git checkout ci-stats || git checkout -b ci-stats
          mkdir -p test-badges                                                              # Create folder if missing
          cp ci-stats/*.json test-badges/                                                   # Copy reports into the folder
          
          # Add and Push changes to ci-stats
          git add .                                                                         
          git commit -m "Update test badge JSONs from CI" || echo "No changes"          
          git push origin ci-stats --force
