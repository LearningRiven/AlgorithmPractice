package org.algomonster.algorithms.sort;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class MergeSortTest{
    @Test
    void test1Brute(){
        List<Integer> unOrderedList = Arrays.asList(5,3,1,2,4);
        List<Integer> solution = Arrays.asList(1,2,3,4,5);
        assertNotEquals(solution,unOrderedList);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);
    }

    @Test
    void test2Brute(){
        List<Integer> unOrderedList = Arrays.asList(8,10,1,3,4,6,9,2,7,5);
        List<Integer> solution = Arrays.asList(1,2,3,4,5,6,7,8,9,10);
        assertNotEquals(solution,unOrderedList);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);
    }

    @Test
    void test3Brute(){
        List<Integer> unOrderedList = Arrays.asList(8466,1024,7744,4668,2011,7744,6861,8964,1100);
        List<Integer> solution = Arrays.asList(1024,1100,2011,4668,6861,7744,7744,8466,8964);
        assertNotEquals(solution,unOrderedList);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);
    }

    @Test
    void test4Brute(){
        List<Integer> unOrderedList = Arrays.asList(1,2,4,5,8,9,7,3,6);
        List<Integer> solution = Arrays.asList(1,2,3,4,5,6,7,8,9);
        assertNotEquals(solution,unOrderedList);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);
    }

    @Test
    void test5Brute(){
        List<Integer> unOrderedList = Arrays.asList(6465136,893954,3274687,1100585,172330,1621246,603622,7271478,761407,201668,2300554,99047,215341,865787,9695,436082,310231,4229731,29136,226594,1433007,1258220,21076,5891738,2797590,1288244,6516,1153339,210524,75186,3074006,482406,97143,1002854,5336238,13303,5254045,6121500,7190595,1706794,2068654,7269043,48908,4719784,5790340,2186206,2458012,1704102,3402806,1863732,61760,1781,876952,6301931,2221350,2074109,3,3466,191009,2516076,2643668,3677887,147082,5127084,4464,7315098,4678,5030475,80556,5940659,2362882,2277209,4884826,2417019,7706176,7671062,555,325433,2912265,2287362,71675,3141855,704087,1320125,4211519,19,155583,2997187,21205,343373,338494,834821,2522744,793132,1648177,6007626,5867974,96311,7257,244115,1249141,5610870,337439,112921,9556,5435760,7563702,4417571,13770,930019,1610022,265167,7593510,903841,439228,3618018,182055,2945948,3909864,30385,5871794,3119542,303352,80045,2227446,1363118,4859426,2287591,576631,34752,1553,4588951,203,2541345,7230687,6070552,3224303,2834929,2200881,1483604,1919272,61640,2520541,3479642,6365933,7811879,5994323,1147004,6856467,1762,7886417,5357609,5190,70789,1161686,2090099,1860239,7645186,6366560,300306,202057,6724,1589242,113,72083,1257466,1789889,4631085,5109134,6048132,5025736,17179,888584,6080302,1320398,51292,866347,2130359,3304192,579381,1094119,3147329,4461053,3207639,3361978,4093120,734862,167321,765180,242792,2580283,3105419,7831,335466,4221239,16013,49812,4874,1282086,3456310,189302,275276,791706,13396,6406954,5786621,1465,2781035,2156324,180954,6336785,418,1682906,4969,225718,2976400,4712725,49419,108135,338541,553377,5631,179222,395440,11621,4441618,370136,635622,2229702,5769447,2800427,3910369,6078152,50894,105495,56899,5294543,837456,1746859,2518735,2908859);
        List<Integer> solution = Arrays.asList(3,19,113,203,418,555,1465,1553,1762,1781,3466,4464,4678,4874,4969,5190,5631,6516,6724,7257,7831,9556,9695,11621,13303,13396,13770,16013,17179,21076,21205,29136,30385,34752,48908,49419,49812,50894,51292,56899,61640,61760,70789,71675,72083,75186,80045,80556,96311,97143,99047,105495,108135,112921,147082,155583,167321,172330,179222,180954,182055,189302,191009,201668,202057,210524,215341,225718,226594,242792,244115,265167,275276,300306,303352,310231,325433,335466,337439,338494,338541,343373,370136,395440,436082,439228,482406,553377,576631,579381,603622,635622,704087,734862,761407,765180,791706,793132,834821,837456,865787,866347,876952,888584,893954,903841,930019,1002854,1094119,1100585,1147004,1153339,1161686,1249141,1257466,1258220,1282086,1288244,1320125,1320398,1363118,1433007,1483604,1589242,1610022,1621246,1648177,1682906,1704102,1706794,1746859,1789889,1860239,1863732,1919272,2068654,2074109,2090099,2130359,2156324,2186206,2200881,2221350,2227446,2229702,2277209,2287362,2287591,2300554,2362882,2417019,2458012,2516076,2518735,2520541,2522744,2541345,2580283,2643668,2781035,2797590,2800427,2834929,2908859,2912265,2945948,2976400,2997187,3074006,3105419,3119542,3141855,3147329,3207639,3224303,3274687,3304192,3361978,3402806,3456310,3479642,3618018,3677887,3909864,3910369,4093120,4211519,4221239,4229731,4417571,4441618,4461053,4588951,4631085,4712725,4719784,4859426,4884826,5025736,5030475,5109134,5127084,5254045,5294543,5336238,5357609,5435760,5610870,5769447,5786621,5790340,5867974,5871794,5891738,5940659,5994323,6007626,6048132,6070552,6078152,6080302,6121500,6301931,6336785,6365933,6366560,6406954,6465136,6856467,7190595,7230687,7269043,7271478,7315098,7563702,7593510,7645186,7671062,7706176,7811879,7886417);
        assertNotEquals(solution,unOrderedList);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);
    }

    @Test
    void testNull(){
        assertThrows(IllegalStateException.class,() -> MergeSort.sortListMerge(null), "removeLast on empty throws");
    }

    @Test
    void testEdgeCases(){
        List<Integer> unOrderedList;
        List<Integer> solution;

        //Single Element
        unOrderedList = Arrays.asList(1);
        solution = Arrays.asList(1);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);

        //Null Element
        unOrderedList = Arrays.asList(1,null);
        solution = Arrays.asList(null,1);
        assertNotEquals(solution,unOrderedList);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);

        //Null Element Large
        unOrderedList = Arrays.asList(5,null,3,null,1,null,2,null,4,null);
        solution = Arrays.asList(null,null,null,null,null,1,2,3,4,5);
        assertNotEquals(solution,unOrderedList);
        unOrderedList = MergeSort.sortListMerge(unOrderedList);
        assertEquals(solution,unOrderedList);
    }
}